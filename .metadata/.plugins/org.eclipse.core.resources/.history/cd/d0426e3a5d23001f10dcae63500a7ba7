package com.learnmicroservices.accounts.services.impl;

import java.util.Optional;
import java.util.Random;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.learnmicroservices.accounts.dto.CustomerDto;
import com.learnmicroservices.accounts.entity.Account;
import com.learnmicroservices.accounts.entity.Customer;
import com.learnmicroservices.accounts.exceptions.CustomerAlreadyExistsException;
import com.learnmicroservices.accounts.exceptions.ResourceNotFoundException;
import com.learnmicroservices.accounts.repository.AccountRepository;
import com.learnmicroservices.accounts.repository.CustomerRepository;
import com.learnmicroservices.accounts.services.IAccountService;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@AllArgsConstructor
@Slf4j
public class AccountServiceImpl implements IAccountService{

	private AccountRepository accountRepository;
	
	private CustomerRepository customerRepository;
	
	
	@Override
	public void createAccount(CustomerDto customerDto) {
		
		log.info("AccountServiceImpl :: createAccount");
		
		Optional<Customer> customerAccount = 
				customerRepository.findByMobileNumber(customerDto.getMobileNumber());
		
		if(customerAccount.isPresent()) {
			throw new CustomerAlreadyExistsException("Customer Already Exists with the given mobile number");
			
		}
		
		//convert customerDto to customer-entity
			//ObjectMapper - used to convert Json
		Customer customer = new Customer();
		BeanUtils.copyProperties(customerDto, customer);
		
		Customer dbCustomer = customerRepository.save(customer);
		
		log.info("AccountServiceImpl :: createAccount - customer successfully created");
		
		//create account
		accountRepository.save(createAccount(dbCustomer));
		
		log.info("AccountServiceImpl :: createAccount - Account successfully created");
		
	}

	private Account createAccount(Customer dbCustomer) {
		
		Account account = new Account();
		account.setCustomerId(dbCustomer.getCustomerId());
		account.setAccountType("SAVINGS");
		account.setBranchAddress("Hyderabad");
		
		Long accNumber = 1000000000L + new Random().nextInt(400000);
		account.setAccountNumber(accNumber);
		
		return account;
		
		
	}

	@Override
	public CustomerDto fetchAccount(String mobileNumber) {
		
		Optional<Customer> customer = customerRepository.findByMobileNumber(mobileNumber)
				.orElseThrow(()-> new ResourceNotFoundException("Customer Not Found with Mobile Number : "+mobileNumber))
		
		Optional<Account> account = accountRepository.findByCustomerId(customer.get().getCustomerId())
			.orElseThrow(()-> ResourceNotFoundException("Account Not Found with Mobile Number : "+ mobileNumber));
				
				
	}

	@Override
	public boolean updateAccouunt(CustomerDto customerDto) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteAccount(String mobileNumber) {
		// TODO Auto-generated method stub
		return false;
	}

}
